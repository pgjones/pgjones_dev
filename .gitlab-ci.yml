stages:
  - lint-test
  - push

frontend-ci:
  stage: lint-test

  image: node:16-alpine

  before_script:
  - cd frontend && npm install

  script:
  - npm run lint

  only:
    changes:
      - frontend/**/*
      - .gitlab-ci.yml

backend-ci:
  stage: lint-test

  image: python:3.8-alpine

  cache:
    key: pgjones-poetry-cache
    paths:
      - backend/.venv

  before_script:
  - apk --update add alpine-sdk cargo gcc libffi-dev libxml2-dev libxslt-dev musl-dev openssl openssl-dev bsd-compat-headers
  - pip install poetry
  - poetry config virtualenvs.in-project true
  - cd backend && poetry install

  script:
  - poetry run format
  - poetry run lint

  only:
    changes:
      - backend/**/*
      - .gitlab-ci.yml

docker-ci:
  stage: lint-test

  image: hadolint/hadolint:latest-debian

  script:
    - hadolint Dockerfile

  only:
    changes:
      - Dockerfile
      - .gitlab-ci.yml

ecr-push:
  stage: push

  image: docker:latest

  services:
    - docker:dind

  before_script:
    - apk add --no-cache curl jq python3 py-pip
    - pip install docutils==0.14 awscli

  script:
    - $(aws ecr get-login --no-include-email --region eu-west-1)

    - docker pull $AWS_REPOSITORY_URL:frontend || true
    - docker build
        --build-arg CI_COMMIT_SHA=$CI_COMMIT_SHA
        --cache-from $AWS_REPOSITORY_URL:frontend
        --target frontend
        -t $AWS_REPOSITORY_URL:frontend .
    - docker push $AWS_REPOSITORY_URL:frontend

    - docker pull $AWS_REPOSITORY_URL:latest || true
    - docker build
        --build-arg CI_COMMIT_SHA=$CI_COMMIT_SHA
        --cache-from $AWS_REPOSITORY_URL:latest
        -t $AWS_REPOSITORY_URL:latest .
    - docker push $AWS_REPOSITORY_URL:latest

  only:
    - master
  tags:
    - docker
